// CIS 22B
// Lab 02: This program demonstrates functions that measure, copy, concatenate, and compare strings using pointers.
// Name: Joshua Bowen, Rashmi Baheti

// Preprocessor directives

#include <iostream>
using namespace std;

//Function prototypes

int stringLength(const char * str);
char * stringNCopy(char * destination, const char * source, int num);
char * stringAdd(char * str1, const char * str2);
int stringCompare(const char * str1, const char * str2);

int main()																										// Function runs menu for calling string manipulation functions.
{
	// Declares variables and array.

	int choice;
	bool menu = true;
	char choice_str[20];

	// Start menu loop.

	while (menu == true)
	{
		cout << "Please enter numbers 1 through 5." << endl;
		cout << "1. Calculate the length of a string" << endl;
		cout << "2. Copy one string into another string" << endl;
		cout << "3. Add two strings " << endl;
		cout << "4. Compare two strings" << endl;
		cout << "5. Exit." << endl << endl;

		cin.getline(choice_str, 10);

		// Input validation.

		if (stringLength(choice_str) != 1 || !isdigit(choice_str[0]))
		{
			choice = 6;
		}
		else
		{
			choice = atoi(choice_str);
		}

		// Interprets choice and runs corresponding prompts and function calls.

		switch (choice)
		{
		case 1:
		{
				  char str[100];																				// Declares array.
				  cout << "Please enter your string : ";														// Prompts user for input.
				  cin.getline(str, 100);																		// Recieves user input.
				  cout << "The length of your string is: " << stringLength(str) << endl;						// Displays output from function call.
				  cout << endl;
				  break;
		}
		case 2:
		{
				  char destination[100], source[100];															// Declares arrays.
				  int num;																						// Declares variable.
				  cout << "Please enter your string to be copied: ";											// Prompts user for input.
				  cin.getline(source, 100);																		// Recieves user input.
				  cout << "Please enter the max number of characters to be copied: ";							// Prompts user for input.
				  cin >> num;																					// Recieves user input.
				  cout << "The copied string is: " << stringNCopy(destination, source, num) << endl << endl;	// Displays output from function call.
				  break;
		}

		case 3:
		{
				  char str1[100];																				// Declares arrays.
				  char str2[100];
				  cout << "Please enter your first string: ";													// Prompts user for input.
				  cin.getline(str1, 100);																		// Recieves user input.

				  cout << "Please enter your second string: ";													// Prompts user for input.
				  cin.getline(str2, 100);																		// Recieves user input.

				  cout << "The concatenated string is: " << stringAdd(str1, str2);								// Displays output from function call.
				  cout << endl << endl;

				  break;
		}
		case 4:
		{
				  char str1[100];																				// Declares arrays.
				  char str2[100];
				  cout << "Please enter your first string: ";													// Prompts user for input.
				  cin.getline(str1, 100);																		// Recieves user input.

				  cout << "Please enter your second string: ";													// Prompts user for input.
				  cin.getline(str2, 100);																		// Recieves user input.

				  int value = stringCompare(str1, str2);														// Declares and initializes variable to output from function call.
				  if (value == 1)																				// Determines correct message to display based on function output(assigned variable value).
					  cout << "String 1 is greater than string 2" << endl << endl;
				  else if (value == -1)
					  cout << "String 2 is greater than string 1" << endl << endl;
				  else
					  cout << "Both strings are equal" << endl << endl;

				  break;
		}
		case 5:
		{
				  menu = false;																					// Ends menu loop.
				  cout << "Good Bye!";																			// Displays ending message.
				  break;
		}
		default:
		{
				   cout << "Invalid entry. Please try again!" << endl << endl;									// Displays invalid input error message.
				   break;
		}
		}
	}
	cin.get();

	return 0;
}


int stringLength(const char * str)																				// Function measures string length.
{
	int i = 0;																									// Declares and initializes variable.

	while (*(str + i) != NULL)																					// Loops until the end of the string.
	{
		i++;																									// Iterates variable.
	}
	return i;																									// Returns length of the string.
}

char * stringNCopy(char* destination, const char* source, int num)												// Function copies string.
{
	int i = 0;																									// Declares and intializes variable.
	while (i < num && (*(source + i) != NULL))																	// Loops till specified length or string ends.
	{
		*(destination + i) = *(source + i);																		// Copies string.
		i++;																									// Iterates variable.
	}

	*(destination + i) = NULL;																					// Defines the end of the new string.
	return destination;																							// Returns copied string.
}

char * stringAdd(char *destination, const char *source)															// Function adds(concatenates) two strings together.
{
	int source_size = stringLength(source);																		// Declares and initializes variable to the length of the source string.
	int destination_size = stringLength(destination);															// Declares and initializes variable to the length of the destination string.
	for (int i = 0; i < source_size; i++)																		// Declares variable 'i' to 0, loops while 'i' is less than the length of the source string, iterates 'i' variable.
	{
		*(destination + destination_size + i) = *(source + i);													// Adds string onto the end of the other string.
	}

	*(destination + source_size + destination_size) = NULL;														// Defines end of the new string.

	return destination;																							// Returns the new string.
}

int stringCompare(const char * str1, const char * str2)															// Function compares two strings.
{
	int i = 0, value;																							// Declares variables. Initializes 'i' to 0. 

	while (*(str1 + i) != NULL && *(str2 + i) != NULL)															// Loops while the value pointed to from the first string isn't NULL and the value pointed to from the second string isn't NULL.
	{
		if (*(str1 + i) > *(str2 + i))																			// If the value from the first string is greater than the value from the second string, returns 1.
			return 1;

		else if (*(str1 + i) < *(str2 + i))																		// Else if the value from the first string is less than the value from the second string, returns -1.
			return -1;

		i++;																									// Else, iterate 'i'.
	}

	if (*(str1 + i) == NULL && *(str2 + i) == NULL)																// If loop gets to the end of both strings without returning a difference, return 0.
		return 0;
	else if (*(str1 + i) == NULL)																				// If the first string ends first, return -1.
		return -1;
	else
		return 1;																								// Else, (the second string ends first) return 1.
}
